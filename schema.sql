-- Drop existing tables in reverse order of dependency
DROP TABLE IF EXISTS public.message CASCADE;
DROP TABLE IF EXISTS public.chat CASCADE;
DROP TABLE IF EXISTS public."user" CASCADE;

-- Enable UUID generation if not already enabled
-- CREATE EXTENSION IF NOT EXISTS "uuid-ossp"; -- Supabase typically enables this

-- User Table (using UUID)
CREATE TABLE public."user" (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(), -- Or potentially default to auth.uid() via trigger/app logic
    created_at TIMESTAMPTZ DEFAULT now() NOT NULL,
    first_name TEXT,
    last_name TEXT,
    email TEXT UNIQUE NOT NULL
    -- Consider adding a constraint or index if you want auth.uid() stored here directly
    -- auth_uuid UUID UNIQUE DEFAULT auth.uid() -- Example if you want it stored redundantly
);

-- Add comments to the user table and columns
COMMENT ON TABLE public."user" IS 'Stores user profile information using UUID as primary key.';
COMMENT ON COLUMN public."user".id IS 'Unique identifier for the user (UUID), often linked to auth.uid().';
COMMENT ON COLUMN public."user".created_at IS 'Timestamp of when the user was created.';
COMMENT ON COLUMN public."user".first_name IS 'User''s first name.';
COMMENT ON COLUMN public."user".last_name IS 'User''s last name.';
COMMENT ON COLUMN public."user".email IS 'User''s unique email address.';

-- Index on email for faster lookups
CREATE INDEX IF NOT EXISTS user_email_idx ON public."user" (email);

-- Chat Table (referencing User UUID)
CREATE TABLE public.chat (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    created_at TIMESTAMPTZ DEFAULT now() NOT NULL,
    title TEXT,
    user_id UUID NOT NULL, -- Changed to UUID
    CONSTRAINT fk_user
        FOREIGN KEY(user_id)
        REFERENCES public."user"(id)
        ON DELETE CASCADE -- Optional: Delete chats if user is deleted
);

-- Add comments to the chat table and columns
COMMENT ON TABLE public.chat IS 'Stores chat sessions.';
COMMENT ON COLUMN public.chat.id IS 'Unique identifier for the chat (UUID).';
COMMENT ON COLUMN public.chat.created_at IS 'Timestamp of when the chat was created.';
COMMENT ON COLUMN public.chat.title IS 'Optional title for the chat session.';
COMMENT ON COLUMN public.chat.user_id IS 'Foreign key referencing the user (UUID) who created the chat.';

-- Index on user_id for faster lookup of chats by user
CREATE INDEX IF NOT EXISTS chat_user_id_idx ON public.chat (user_id);

-- Message Table (referencing User UUID and Chat UUID)
CREATE TABLE public.message (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    created_at TIMESTAMPTZ DEFAULT now() NOT NULL,
    text TEXT NOT NULL,
    role TEXT NOT NULL CHECK (role IN ('user', 'ai')),
    user_id UUID NOT NULL, -- Changed to UUID
    chat_id UUID NOT NULL,
    CONSTRAINT fk_user
        FOREIGN KEY(user_id)
        REFERENCES public."user"(id)
        ON DELETE CASCADE, -- Optional: Delete messages if user is deleted
    CONSTRAINT fk_chat
        FOREIGN KEY(chat_id)
        REFERENCES public.chat(id)
        ON DELETE CASCADE -- Important: Delete messages if chat is deleted
);

-- Add comments to the message table and columns
COMMENT ON TABLE public.message IS 'Stores individual messages within a chat.';
COMMENT ON COLUMN public.message.id IS 'Unique identifier for the message (bigint, auto-incrementing).';
COMMENT ON COLUMN public.message.created_at IS 'Timestamp of when the message was created.';
COMMENT ON COLUMN public.message.text IS 'The content of the message.';
COMMENT ON COLUMN public.message.role IS 'Indicates whether the message is from the user or the ai.';
COMMENT ON COLUMN public.message.user_id IS 'Foreign key referencing the user (UUID) associated with the message.';
COMMENT ON COLUMN public.message.chat_id IS 'Foreign key referencing the chat this message belongs to.';

-- Indexes on message table
CREATE INDEX IF NOT EXISTS message_chat_id_idx ON public.message (chat_id);
CREATE INDEX IF NOT EXISTS message_user_id_idx ON public.message (user_id);
CREATE INDEX IF NOT EXISTS message_chat_id_created_at_idx ON public.message (chat_id, created_at DESC); -- For fetching messages in order

-- ---------------------------------
-- Row Level Security (RLS) Policies
-- ---------------------------------

-- Enable RLS on tables
ALTER TABLE public."user" ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.chat ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.message ENABLE ROW LEVEL SECURITY;

-- Force RLS for table owners (recommended for security)
ALTER TABLE public."user" FORCE ROW LEVEL SECURITY;
ALTER TABLE public.chat FORCE ROW LEVEL SECURITY;
ALTER TABLE public.message FORCE ROW LEVEL SECURITY;


-- --- User Table Policies ---

-- Policy: Allow users to read their own user record based on auth.uid()
DROP POLICY IF EXISTS "Allow individual user read access based on auth uid" ON public."user";
CREATE POLICY "Allow individual user read access based on auth uid"
    ON public."user" FOR SELECT
    USING (id = auth.uid()); -- Use Supabase built-in function

-- Policy: Allow users to update their own record (e.g., name)
-- Note: Consider carefully if users should be able to update their own email or primary ID.
DROP POLICY IF EXISTS "Allow individual user update access" ON public."user";
CREATE POLICY "Allow individual user update access"
    ON public."user" FOR UPDATE
    USING (id = auth.uid()); -- Use Supabase built-in function

-- --- Chat Table Policies ---

-- Policy: Allow users full access (CRUD) to their own chats based on auth.uid()
DROP POLICY IF EXISTS "Allow full access for own chats based on auth uid" ON public.chat;
CREATE POLICY "Allow full access for own chats based on auth uid"
    ON public.chat FOR ALL
    USING (user_id = auth.uid()); -- Use Supabase built-in function


-- --- Message Table Policies ---

-- Policy: Allow users full access (CRUD) to their own messages based on auth.uid()
-- This assumes messages have the user's auth.uid() in the user_id column.
DROP POLICY IF EXISTS "Allow full access for own messages based on auth uid" ON public.message;
CREATE POLICY "Allow full access for own messages based on auth uid"
    ON public.message FOR ALL
    USING (user_id = auth.uid()); -- Use Supabase built-in function

-- Alternative/Additional Policy Example: Allow users to read all messages in chats they own
-- This might be useful if AI messages don't have a user_id matching auth.uid() or if you want users to see the whole conversation.
-- DROP POLICY IF EXISTS "Allow read access to messages in own chats" ON public.message;
-- CREATE POLICY "Allow read access to messages in own chats"
--     ON public.message FOR SELECT
--     USING (
--         chat_id IN (
--             SELECT id FROM public.chat WHERE user_id = auth.uid()
--         )
--     ); 